#+title: Test Setup for Del-Role Command Handler
#+AUTHOR: VLEAD
#+DATE: [2017-07-3 Mon]
#+SETUPFILE: ../../org-templates/level-3.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Test Harness

  Instantiates a =Engine= component and populates it with the
  =DelRole= command handler. 

** Imports
#+BEGIN_SRC python :tangle harness.py
import unittest
from unittest import TestCase
from runtime.components.engine.engine import Engine
from runtime.components.engine.del_role.del_role import DelRole 
from runtime.emgrs.svem.svem import EntityMgr
from runtime.objects.email.email import Email
from runtime.objects.name.name import Name
from runtime.objects.role.role import Role
from runtime.objects.user.user import User
from runtime.objects.session.session import Session
from runtime.datatypes.cmd.cmd import Cmd

#+END_SRC

** Class TestHarness

This class's =setUp= method sets up the context for running
tests on the =del_role= route for the engine component. 

 - creates an entity manager
 - creates a engine component with that entity manager
 - adds the =del_role='s command handler (=DelRole.do=)
 - create a user object
 - add user to the entity manager as an entity
 - creates a session object
 - adds the session to the entity manager as an entity
 - saves the session as a field for access to the test cases 

#+BEGIN_SRC python :tangle harness.py
class TestHarness(TestCase):
    TESTING = True

    def setUp(self):
        # create component
        self.em = EntityMgr()
        self.component = Engine(self.em)

        # add cmd handler to it
        self.component.add_cmd_handler(Cmd.del_role, DelRole.do)

        user = User(name=Name(val="admin user"),
                    email=Email(val="admin@gnu.org"),
                    roles=[Role.admin])

        d_user = User(name=Name(val="user user"),
                    email=Email(val="user@gnu.org"),
                    roles=[Role.user,Role.admin])


        d_key = "kdshfkjdahfjdhfkjb"
        session = Session(user=user, role=Role.admin, key=d_key)

        self.component.em.add_user(user)
        self.component.em.add_user(d_user)
        self.component.em.add_session(session)

        self.session = session
        self.d_user = d_user
        self.user = user
        

    def tearDown(self):
        self.component = None

#+END_SRC

* Package

#+BEGIN_SRC python :eval no :tangle __init__.py
print "runtime.components.engine.del_role.tests package"
#+END_SRC
