#+TITLE: =GetRoleSet= route of the =Engine= component
#+AUTHOR: VLEAD
#+DATE: [2017-07-11 Tue]
#+SETUPFILE: ../../../../org-templates/level-4.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction  

  This is the specification and implementation of the =get_role_set_in_system=
  route of the =Filter= component.


* Implementation

** Imports and class =GetRoleSet=
#+BEGIN_SRC python :tangle get_role_set_in_system.py
import traceback

from runtime.datatypes.cmd.cmd import Cmd
from runtime.objects.user.user import User

class GetRoleSet:

#+END_SRC

** The type structure of the =get_role_set_in_system= route

   The =get_role_set_in_system= route is a dictionary with 'cmd' equal to =Cmd.get_role_set_in_system=
   and a 'session' that is an instance of =Session=.
#+BEGIN_EXAMPLE
instr = {'cmd': Cmd.get_role_set_in_system, 'session': Session.is_inst}
#+END_EXAMPLE
** The =do= method
The =do= method performs the operation on the entities.

#+BEGIN_SRC python :tangle get_role_set_in_system.py
    @staticmethod 
    def do(obj, instr):
        print "get_role_set_in_system: %s" % instr
        userlist = obj.em.get_all(User)
        role_set = []
        for i in range(len(userlist)):
            role_list = userlist[i].get("roles")
            for j in range(len(role_list)):
                role_element = role_list[j]
                if role_element not in role_set:
                    role_set.append(role_element)
        return {'instr': instr, 'result': role_set}

#+END_SRC


* Package														:boilerplate:
#+BEGIN_SRC python :eval no :tangle __init__.py
print "runtime.components.filter.get_role_set_in_system package"
#+END_SRC

