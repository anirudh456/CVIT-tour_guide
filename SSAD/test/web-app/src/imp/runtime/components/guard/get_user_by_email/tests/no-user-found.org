#+title: Test for get_user_by_email when there is no user for the given email
#+AUTHOR: VLEAD
#+DATE: [2017-07-6 Thu]
#+SETUPFILE: ../../../../../org-templates/level-5.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Test
  =TestGetUser= object holds an instance of the =GetUser= component against
  the field =component=.  This test invokes the =do= method on the component.

** Imports
#+BEGIN_SRC python :tangle no_user_for_email.py
import unittest
from runtime.objects.session.session import Session
from runtime.objects.email.email import Email
from runtime.components.guard.GetUser.tests.harness import TestHarness
from runtime.datatypes.cmd.cmd import Cmd

#+END_SRC


** Test Case

   Imports the TestHarness which sets up the component.  This test
   creates an instruction with cmd =GetUser=,a dictionary with an
   object that is an instance of =Email= and an existing session.  The
   guard's do method fails.

#+BEGIN_SRC python :tangle no_user_for_email.py
class TestDoPasses(TestHarness):

    def test_do_passes(self):
        print "test_do_passes"
        session = self.session
        email = Email(val = "nouser@gnu.org")
        instr = {'cmd': Cmd.get_user_by_email, 'session': session, 'data': {'email' : email}}
        guard = self.component
        result = guard.do(instr)
        print result
        self.assertEqual(result, instr)

#+END_SRC

