#+title: Test on get_user_by_email route when session is not present in the entity manager
#+AUTHOR: VLEAD
#+DATE: [2017-07-6 Thu]
#+SETUPFILE: ../../../../../org-templates/level-5.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Test 
  =TestGetUser= object holds an instance of the =GetUser= component against
  the field =component=.  This test invokes the =do= method on the component
  which throws an =Exception= when state check is performed.

** Imports
#+BEGIN_SRC python :tangle test_no_session.py
import unittest
from runtime.objects.session.session import Session
from runtime.objects.email.email import Email
from runtime.components.guard.get_user_by_email.tests.harness import TestHarness
from runtime.datatypes.cmd.cmd import Cmd

#+END_SRC


** Test Case

   Imports the TestHarness which sets up the component. This test creates an
   instruction with cmd =get_user_by_email=, a dictionary
   with an object that an instance of =Email= and a session.  The entity manager does not
   hold a session contained in the instruction.  The guard's do method raises an
   =Exception=.

#+BEGIN_SRC python :tangle test_no_session.py
class TestNoSession(TestHarness):

    def test_no_session(self):
        print "test_no_session"
        # delete session from entity manager setup in the TestHarness
        self.component.em.delete_session(self.session)
        session = self.session
        email = Email(val="user@gnu.org")
        instr = {'cmd': Cmd.get_user_by_email, 'session': session , 'data' : {'email':email}}
        guard = self.component
        with self.assertRaises(Exception):
            guard.do(instr)

#+END_SRC
