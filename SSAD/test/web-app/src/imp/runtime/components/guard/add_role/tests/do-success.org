#+title: Test that invoked the =do= method without any failure
#+AUTHOR: VLEAD
#+DATE: [2017-04-11 Tue]
#+SETUPFILE: ../../../../../org-templates/level-5.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Test
  =TestAddRole= object holds an instance of the =AddRole= component
  against the field =component=.  This test invokes the =do= method on the
  component.

** Imports
#+BEGIN_SRC python :tangle test_do_passes.py
import unittest
from runtime.objects.session.session import Session
from runtime.objects.role.role import Role
from runtime.components.guard.add_role.tests.harness import TestHarness
from runtime.datatypes.cmd.cmd import Cmd

#+END_SRC


** Test Case

   Imports the TestHarness which sets up the component. 
   This test creates an instruction with cmd =add_role=, 
   an existing session. The guard's =do=
   method succeeds and returns the instruction as result.

#+BEGIN_SRC python :tangle test_do_passes.py
class TestDoPasses(TestHarness):

    def test_do_passes(self):
        print "test_do_passes"
        
        # Current Session
        session = self.session

        
        instr = {
            'cmd': Cmd.add_role, 
            'session': session, 
            'data': {'user' : self.d_user,
                     'addrole': Role.admin}
        }
        guard = self.component
        result = guard.do(instr)
        self.assertEqual(result, instr)

#+END_SRC
