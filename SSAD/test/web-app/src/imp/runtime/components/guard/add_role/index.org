#+TITLE: =add_role= route of the =Guard= component
#+AUTHOR: VLEAD
#+DATE: [2017-07-10 Mon]
#+SETUPFILE: ../../../../org-templates/level-4.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction  

This is the specification and implementation of the
=add_role= route of the =Guard= component.  
* Checks

 - TypeCheck :: Check whether the instruction consists of the command
                =add_role=, the =data= dictionary of =user= object of
                type User , =addrole= object of type Role and
                additionally contains a session object (and nothing
                else).  The typecheck may be implemented by consulting
                the [[../../../datatypes/instr/index.org][instruction datatype]] specification.


 - AuthCheck :: Check whether the role in the session is =admin=.
                Only admins are allowed to add roles to a user.

 - StateCheck :: Check whether the session in the instruction is
                 indeed an entity currently present in the entity
                 manager's session aggregate.

Note that there is a unique constraint on the role to be added to the
user,it should not already be present in the roles list of that user
* Implemenbtation
** Imports and class =AddRole=
#+BEGIN_SRC python :tangle add_role.py
import traceback
from runtime.exceptions.app.exception import AppException
from runtime.utils.type_utils.type_utils import check_pred
from runtime.datatypes.cmd.cmd import Cmd
from runtime.objects.session.session import Session
from runtime.objects.role.role import Role
from runtime.datatypes.instr.add_role.add_role_instr import AddRoleInstr

class AddRole:

#+END_SRC

** The type structure of the =add_role= route

The =add_role= route is a dictionary with 'cmd' equal to
=Cmd.add_role=, a 'data' which is again a dictionary with 
'user' which is instance of class =User= and a 'session' 
that is an instance of =Session=.

** The =do= method
This method takes a component and instruction and simply
does all the checks.
#+BEGIN_SRC python :tangle add_role.py
    @staticmethod 
    def do(component, instr):
        print "add_role: %s" % instr

        AddRole.check_type(instr)
        AddRole.check_auth(component, instr)
        AddRole.check_state(component, instr)
        return instr

#+END_SRC
* Checks
** Type checks

Check if the the instruction is of the correct shape,
i.e. satisfies the predicate =AddRoleInstr.is_inst=.

#+BEGIN_SRC python :tangle add_role.py
    @staticmethod
    def check_type(instr):
         check_pred(AddRoleInstr.is_inst)(instr)
#+END_SRC

** Authorization check

The Authorization checks for the following two authorization
constraints:

   1. Only an =admin= may perform the =add_role= operation
 
   2. The role that is to be added should not already be present in
      the list of roles of the user.If not,an exception is to be raised.

*** Steps

    1. Retrieve the session from the instr
 
    2. Retrieve the user from the session

    3. Retrieve the role from the session

    4. If the role is not an admin role (=Role.admin=) then
       raise an exception.

    5. Get the roles of the user from the instruction's data key.

    6. Get the role from the instruction's addrole key.

    7. If the role to be added is a role of that 
       user then raise an exception.


#+BEGIN_SRC python :tangle add_role.py
    @staticmethod
    def check_auth(obj, instr):
        session = instr['session']
        
        role = session.get("role")
        user = instr['data']['user']
        roles = user.get('roles')
        addrole = instr['data']['addrole']
        if role != Role.admin:
            raise AppException(op="add_role.check_auth", 
                msg="Only admin can add a role")
        if addrole in roles :
            raise AppException(op="add_role.check_auth",
                msg="cannot add role")
        return instr
        

#+END_SRC

** State check

This check passes if the session is already an entity
present in the entity manager.  Otherwise an exception
is raised.

    1. Retrieve the session from the instruction.
 
    2. Retrieve the entity manager from the component.
 
    3. Check if the session is present in the entity
       manager. 

    4. If the session is not present, then raise an
       exception.  The instruction's session must always be
       in the session aggregate managed by the entity manager.

#+BEGIN_SRC python :tangle add_role.py

    @staticmethod
    def check_state(component, instr):
        if not component.em.is_present(instr['session']):
            raise AppException(op="add_role.check_state",
                                   msg="session is not in the entity manager")
        else:
            return instr

#+END_SRC

* Packages
#+BEGIN_SRC python :eval no :tangle __init__.py
print "runtime.components.guard.add_role package"
#+END_SRC
