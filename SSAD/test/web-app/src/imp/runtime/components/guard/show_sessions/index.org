#+TITLE: =show_sessions= route of the =Guard= component
#+AUTHOR: Anirudh Reddy
#+DATE: [2017-06-28 Wed]
#+SETUPFILE: ../../../../org-templates/level-4.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction  

This is the specification and implementation of the
=show_sessions= route of the =Guard= component.  

* Checks

 - TypeCheck :: Check whether the instruction consists of
      the command =show_sessions= and additionally contains a
      session object (and nothing else).  The typecheck may
      be implemented by consulting the [[../../../datatypes/instr/index.org][instruction datatype]]
      specification.


 - AuthCheck :: Check whether the role in the instruction's
      session is  =admin=.Only admins are allowed to view all sessions.


 - StateCheck :: Check whether the session in the
      instruction is indeed an entity currently present in
      the entity manager's session aggregate.

* Implementation

** Imports and class =ShowSessions=
#+BEGIN_SRC python :tangle show_sessions.py
import traceback
from  runtime.exceptions.app.exception import AppException
from runtime.utils.type_utils.type_utils import check_pred
from runtime.objects.role.role import Role
from runtime.datatypes.cmd.cmd import Cmd
from runtime.objects.session.session import Session
from runtime.datatypes.instr.show_sessions.show_sessions_instr import ShowSessionsInstr

class ShowSessions:

#+END_SRC

** The type structure of the =show_sessions= route

The =show_sessions= route is a dictionary with 'cmd' equal to
=Cmd.show_sessions= and a 'session' that is an instance of
=Session=.

#+BEGIN_EXAMPLE
instr = {'cmd': Cmd.show_sessions, 'session': Session.is_inst}
#+END_EXAMPLE

** The =do= method
The =do= method simply does all the checks.  
#+BEGIN_SRC python :tangle show_sessions.py
    @staticmethod 
    def do(component, instr):
        print "show_sessions: %s" % instr

        ShowSessions.check_type(instr)
        ShowSessions.check_auth(component, instr)
        ShowSessions.check_state(component, instr)
        return instr

#+END_SRC

* Checks
** Type checks
#+BEGIN_SRC python :tangle show_sessions.py
    @staticmethod
    def check_type(instr):
        check_pred(ShowSessionsInstr.is_inst)(instr)
        return instr

#+END_SRC
** Authorization check

This function checks if the user in the session of the
instruction has =admin= role as one of its roles.   If not,
an exception is to be raised.

    1. Retrieve the session from the instr
 
    2. Retrieve the user from the session

    3. Retrieve the role from the session

    4. If the role is not an admin role (=Role.admin=) then
       raise an exception.

    5. Otherwise return the instruction.

#+BEGIN_SRC python :tangle show_sessions.py
    @staticmethod
    def check_auth(component, instr):
        session = instr['session']
        user = session.get('user')
        role = session.get('role')
        if role != Role.admin:
            raise AppException(op="add_user.check_auth",
                msg="Only admin can view all sessions")
        return instr
#+END_SRC

** State check

This check passes if the session is already an entity
present in the entity manager.  Otherwise an =AppException=
is raised.

    1. Retrieve the session from the instruction.
 
    2. Retrieve the entity manager from the component.
 
    3. Check if the session is present in the entity
       manager. 

    4. If the session is not present, then raise an
       exception.  The instruction's session must always be
       in the session aggregate managed by the entity manager.

#+BEGIN_SRC python :tangle show_sessions.py

    @staticmethod
    def check_state(component, instr):
        if not component.em.is_present(instr['session']):
            raise AppException(op="show_sessions.check_state",
                                   msg="session is not in the entity manager")

        return instr

#+END_SRC

* Package                                                       :boilerplate:
#+BEGIN_SRC python :eval no :tangle __init__.py
print "runtime.components.guard.show_sessions package"
#+END_SRC

